dependencies {
    compileOnly group: "org.osgi", name: "org.osgi.core", version: "6.0.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel"
	compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations"
	compileOnly group: "com.liferay", name: "com.liferay.dynamic.data.mapping.api"
	compileOnly group: "com.liferay", name: "com.liferay.petra.mail"
	compileOnly group: "javax.mail", name: "mail"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib"
	compileOnly group: "javax.portlet", name: "portlet-api"
	compileOnly group: "javax.servlet", name: "javax.servlet-api"
	compileOnly group: "jstl", name: "jstl"
}

class CustomDockerInfo extends DefaultTask {
	String dockerContainerName

	@TaskAction
	void deployInDocker() {
		if (isValidName(dockerContainerName)) {
			def jarFilePath = "build/libs/formEntryWrapper-1.0.0.jar"
			def dockerDeployPath = "/opt/liferay/deploy"


			def build = "blade gw build"
			def deploy = "tar Ccf \$(dirname $jarFilePath) - \$(basename $jarFilePath) | docker exec -i $dockerContainerName tar x -C $dockerDeployPath -f -"
			def buildAndDeploy = "$build && $deploy"
			def buildAndDeployExecution = buildAndDeploy.execute()

			println deploy

			println buildAndDeployExecution.text
		} else {
			throw new StopActionException('Container name is not valid')
		}
	}

	private static boolean isValidName(String containerName) {
		return !(containerName == '' || containerName == ' ' || containerName == null)
	}
}

tasks.register("customDockerDeploy", CustomDockerInfo) {
	group = 'docker'	// This put the task inside de tasks group called docker
	dockerContainerName = "my_liferay"
}

tasks.register("customClean") {
	group = 'docker'	// This put the task inside de tasks group called docker
	def command = 'docker exec my_liferay rm -rf /opt/liferay/osgi/modules/formEntryWrapper-1.0.0.jar'
	def result = command.execute()

	println result.text
}
